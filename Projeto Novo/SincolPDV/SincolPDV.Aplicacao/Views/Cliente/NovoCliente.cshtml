@model SincolPDV.Dominio.Cliente

@{
    ViewBag.Title = "Novo Cliente";
    Layout = null;
}

@using (Html.BeginForm("", "", FormMethod.Post, new { id = "formDados" }))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


    <div class="modal-dialog" id="modal">
        <div class="modal-content">
            <div class="modal-header btn-success">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h3 class="modal-title"><i class="glyphicon glyphicon-edit"></i> Cadastrar Cliente</h3>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="box-body">

                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Nome</label>
                                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", placeholder = "Nome Completo" } })
                                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Sexo</label>
                                @Html.DropDownListFor(model => model.Sexo,
                                    new SelectList(
                                  new List<Object>{
                                       new { value = "" , text = "-- Selecione --"  },
                                       new { value = "Masculino" , text = "Masculino" },
                                       new { value = "Feminino" , text = "Feminino"}
                                    },
                                  "value",
                                  "text",
                                   2), new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Data de Nascimento</label>
                                <div class="input-group">
                                    <div class="input-group-addon">
                                        <i class="fa fa-calendar"></i>
                                    </div>
                                    <input type="text" name="DtNascimento" id="DtNascimento" class="form-control" data-inputmask="'alias': 'mm/dd/yyyy'" data-mask>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Pessoa-Tipo</label>
                                @Html.DropDownListFor(model => model.tp_pessoa,
                                    new SelectList(
                                  new List<Object>{
                                       new { value = "" , text = "-- Selecione --"  },
                                       new { value = "Física" , text = "Física" },
                                       new { value = "Jurídica" , text = "Jurídica"}
                                    },
                                  "value",
                                  "text",
                                   2), new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="col-md-4" id="cpfBox" style="display: block;">
                            <div class="form-group">
                                <label>CPF</label>
                                <input type="text" name="CPF" , id="CPF" class="form-control" data-inputmask='"mask": "999.999.999-99"' data-mask>
                                @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4" id="cnpjBox" style="display: none;">
                            <div class="form-group">
                                <label>CNPJ</label>
                                <input type="text" name="CNPJ" , id="CNPJ" class="form-control" data-inputmask='"mask": "99.999.999/9999-99"' data-mask>
                                @Html.ValidationMessageFor(model => model.CNPJ, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Telefone</label>
                                <input type="text" name="Telefone" , id="Telefone" class="form-control" data-inputmask='"mask": "(99) 99999-9999"' data-mask>
                                @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-8">
                            <div class="form-group">
                                <label>Email</label>
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-envelope"></i></span>
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <label>Limite de Crédito</label>
                            <div class="input-group">
                                <span class="input-group-addon">$</span>
                                @Html.EditorFor(model => model.LimiteCredito, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LimiteCredito, "", new { @class = "text-danger" })
                                <span class="input-group-addon">.00</span>
                            </div>
                        </div>

                        <div class="col-md-8">
                            <div class="form-group">
                                <label>Endereço</label>
                                @Html.EditorFor(model => model.Endereco, new { htmlAttributes = new { @class = "form-control", placeholder = "Endereço completo" } })
                                @Html.ValidationMessageFor(model => model.Endereco, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Dias de Emprestimo</label>
                                @Html.DropDownListFor(model => model.LimiteDias,
                                    new SelectList(
                                  new List<Object>{
                                       new { value = 0 , text = "-- Selecione --"  },
                                       new { value = 1 , text = "01 Dia" },
                                       new { value = 2 , text = "02 Dias"},
                                       new { value = 3 , text = "03 Dias"},
                                       new { value = 4 , text = "04 Dias"},
                                       new { value = 5 , text = "05 Dias"},
                                       new { value = 6 , text = "06 Dias"},
                                       new { value = 7 , text = "07 Dias"},
                                       new { value = 8 , text = "08 Dias"},
                                       new { value = 9 , text = "09 Dias"},
                                       new { value = 10 , text = "10 Dias"},
                                       new { value = 11 , text = "11 Dias"},
                                    },
                                  "value",
                                  "text",
                                   2), new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            <label></label>
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <label>
                                    @Html.CheckBoxFor(model => model.StatusBool, new { @class = "flat-red" })
                                    Ativo
                                </label>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                <label>Observação</label>
                                @Html.TextAreaFor(model => model.Observacao, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Observacao, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                </div>

                <div class="modal-footer">
                    <input type="button" value="Cadastrar" class="btn btn-success" onclick="Incluir('/Cliente/NovoCliente')" />
                    <button type="button" class="btn btn-default" data-dismiss="modal">Fechar</button>
                </div>
            </div><!-- /.modal-content -->
        </div>
    </div>

}

<script>
    $(function () {

        $("#tp_pessoa").change(function () {
            var select = $("#tp_pessoa option:selected").val();

            if (select == "Física") {
                $("#cpfBox").css("display", "block");
                $("#cnpjBox").css("display", "none");
                $("#CNPJ").val('');
            }
            else {
                $("#cpfBox").css("display", "none");
                $("#cnpjBox").css("display", "block");
                $("#CPF").val('');
            }
        });

        //===========================================================================================================================

        //Initialize Select2 Elements
        $(".select2").select2();

        //Datemask dd/mm/yyyy
        $("#datemask").inputmask("dd/mm/yyyy", { "placeholder": "dd/mm/yyyy" });
        //Datemask2 mm/dd/yyyy
        $("#datemask2").inputmask("mm/dd/yyyy", { "placeholder": "mm/dd/yyyy" });
        //Money Euro
        $("[data-mask]").inputmask();

        //Date range picker
        $('#reservation').daterangepicker();
        //Date range picker with time picker
        $('#reservationtime').daterangepicker({ timePicker: true, timePickerIncrement: 30, format: 'MM/DD/YYYY h:mm A' });
        //Date range as a button
        $('#daterange-btn').daterangepicker(
            {
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                },
                startDate: moment().subtract(29, 'days'),
                endDate: moment()
            },
        function (start, end) {
            $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
        }
        );

        //iCheck for checkbox and radio inputs
        $('input[type="checkbox"].minimal, input[type="radio"].minimal').iCheck({
            checkboxClass: 'icheckbox_minimal-blue',
            radioClass: 'iradio_minimal-blue'
        });
        //Red color scheme for iCheck
        $('input[type="checkbox"].minimal-red, input[type="radio"].minimal-red').iCheck({
            checkboxClass: 'icheckbox_minimal-red',
            radioClass: 'iradio_minimal-red'
        });
        //Flat red color scheme for iCheck
        $('input[type="checkbox"].flat-red, input[type="radio"].flat-red').iCheck({
            checkboxClass: 'icheckbox_flat-green',
            radioClass: 'iradio_flat-green'
        });

    });
</script>
